{"version":3,"sources":["serviceWorker.js","actions/actions.js","rootReducer.js","reducers/reducer.js","NavBar.js","selectors/selector.js","graph.js","controls.js","statuscard.js","home.js","forminput.js","config.js","app.js","index.js","store.js"],"names":["Boolean","window","location","hostname","match","getGraphData","dispatch","getState","from","smokerpi","graphIndex","api","getConfig","getCurrentState","url","action","fetch","then","response","ok","json","Error","statusText","data","toastr","removeByType","type","error","message","postApi","postData","method","headers","body","JSON","stringify","combineReducers","state","graphData","maxGraph","concat","reduce","max","n","i","config","payload","navBar","props","Container","Navbar","collapseOnSelect","bg","variant","expand","fixed","Brand","appTitle","Toggle","aria-controls","Collapse","id","Nav","className","to","NavItem","as","Link","NavDropdown","title","Item","href","Graph","timer","this","setInterval","setState","clearInterval","style","paddingBottom","position","height","top","left","width","margin","right","bottom","dataKey","stroke","dot","yAxisId","Component","connect","selectors","actions","Controls","Row","Col","ButtonGroup","Button","onClick","toggleBlower","toggleDamper","toggleAutomatic","actionCreators","enabled","pid","blower","damper","StatusCard","Card","Body","temperature","Footer","targetTemperature","Home","CardDeck","FormInput","name","placeholder","onChange","value","label","children","Form","Group","Label","htmlFor","Control","border","defaultProps","Config","errors","submitted","handleChange","event","target","onSubmit","err","set_temperature","Object","getOwnPropertyNames","length","updateConfig","nextProps","text","required","blower_minimum","push_interval","graph_interval","cs_pin","clock_pin","data_pin","blower_pin1","blower_pin2","damper_pin","damper_minimum","damper_maximum","App","path","ReactDOM","render","StrictMode","store","createStore","rootReducer","applyMiddleware","thunk","logger","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b19b95e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {toastr} from \"react-redux-toastr\";\r\n\r\nexport const LOAD_DATA_SUCCESS = \"LOAD_DATA_SUCCESS\";\r\nexport const LOAD_GRAPH_DATA_SUCCESS = \"LOAD_GRAPH_DATA_SUCCESS\";\r\nexport const LOAD_CONFIG_DATA_SUCCESS = \"LOAD_CONFIG_DATA_SUCCESS\";\r\nexport const LOAD_STATE_DATA_SUCCESS = \"LOAD_STATE_DATA_SUCCESS\";\r\nexport const DATA_LOADED = \"DATA_LOADED\";\r\nexport const SEND_WEBSOCKET_MESSAGE = \"SEND_WEBSOCKET_MESSAGE\";\r\nexport const SOCKET_MESSAGE_RECEIVED = \"SOCKET_MESSAGE_RECEIVED\";\r\n\r\nexport const getGraphData = () => (dispatch, getState) => {\r\n    let from = getState().smokerpi.graphIndex;\r\n    return api(dispatch, `/api/graph?from=${from}`, LOAD_GRAPH_DATA_SUCCESS)\r\n}\r\n\r\nexport const getConfig = () => (dispatch) => {    \r\n    return api(dispatch, `/api/config`, LOAD_CONFIG_DATA_SUCCESS);\r\n    }\r\n\r\nexport const updateConfig = (config) => (dispatch) => {    \r\n    return postApi(dispatch, `/api/config`, config, () => dispatch(getConfig()));\r\n    }    \r\n\r\nexport const getCurrentState = () => (dispatch) => {    \r\n    return api(dispatch, `/api/state`, LOAD_STATE_DATA_SUCCESS);\r\n    }\r\n\r\nexport const toggleBlower = () => (dispatch, getState) => {    \r\n    let enabled = getState().smokerpi.state.blower;\r\n    return postApi(dispatch, `/api/blower`, { enabled: enabled !== 100 }, () => dispatch(getCurrentState()));\r\n    }\r\n\r\nexport const toggleDamper = () => (dispatch, getState) => {    \r\n    let enabled = getState().smokerpi.state.damper;\r\n    return postApi(dispatch, `/api/damper`, { enabled: enabled !== 100 }, () => dispatch(getCurrentState()));\r\n    }\r\n\r\nexport const toggleAutomatic = () => (dispatch, getState) => {    \r\n    let enabled = getState().smokerpi.state.pid;\r\n    return postApi(dispatch, `/api/pid`, { enabled: !enabled }, () => dispatch(getCurrentState()));\r\n    }\r\n\r\nconst api = (dispatch, url, action) => {       \r\n    return fetch(url)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            throw new Error(response.statusText);\r\n        })\r\n        .then(\r\n            data => {\r\n                toastr.removeByType('error');\r\n                dispatch({type: action, data});\r\n            },\r\n            error => {\r\n                toastr.error(`Error calling api: ${error.message}`);\r\n            })\r\n    }\r\n\r\nconst postApi = (dispatch, url, postData, then) => {       \r\n    return fetch(url, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(postData) \r\n        })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            throw new Error(response.statusText);\r\n        })\r\n        .then(\r\n            data => {\r\n                toastr.removeByType('error');\r\n                then(dispatch, data);\r\n            },\r\n            error => {\r\n                toastr.error(`Error calling api: ${error.message}`);\r\n            })\r\n    }    \r\n   \r\n","import { combineReducers } from 'redux';\r\nimport reducer from './reducers/reducer';\r\n\r\nexport default combineReducers({ \r\n smokerpi: reducer\r\n});","import {LOAD_GRAPH_DATA_SUCCESS, LOAD_CONFIG_DATA_SUCCESS, LOAD_STATE_DATA_SUCCESS, SOCKET_MESSAGE_RECEIVED} from \"../actions/actions\";\r\n\r\nexport default function reducer(state = { graphData: [], graphIndex: 0 }, action) {\r\n    switch (action.type) {\r\n        case LOAD_GRAPH_DATA_SUCCESS: {\r\n            var graphData = [...state.graphData];\r\n            graphData = graphData.concat(action.data);\r\n            var maxGraph = graphData.reduce((max, n) => n.i > max ? n.i : max, 0) + 1;\r\n\r\n            return {\r\n                ...state,\r\n                graphIndex: maxGraph,\r\n                graphData: graphData\r\n            }\r\n        }\r\n        case LOAD_CONFIG_DATA_SUCCESS: {\r\n            return {\r\n                ...state,                \r\n                config: action.data\r\n            }\r\n        }\r\n        case LOAD_STATE_DATA_SUCCESS: {\r\n            return {\r\n                ...state,                \r\n                state: action.data\r\n            }\r\n        }\r\n        case SOCKET_MESSAGE_RECEIVED: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { Container,Navbar,Nav,NavDropdown,NavItem } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\nexport default function navBar(props) {\r\n    return (\r\n<Container>\r\n<Navbar collapseOnSelect bg=\"dark\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n  <Navbar.Brand>{props.appTitle}</Navbar.Brand>  \r\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n    <Nav className=\"mr-auto\">      \r\n    <LinkContainer to=\"/\">\r\n        <NavItem as={Nav.Link}>Home</NavItem>\r\n    </LinkContainer>\r\n    <LinkContainer to=\"/config\">\r\n      <NavItem as={Nav.Link}>Config</NavItem>\r\n    </LinkContainer>    \r\n    </Nav>\r\n    <Nav>      \r\n      <NavDropdown title=\"Help\" id=\"basic-nav-dropdown\">\r\n        <NavDropdown.Item href=\"https://github.com/Phazeshift/smokerpi\">About</NavDropdown.Item>        \r\n      </NavDropdown>\r\n    </Nav>\r\n    </Navbar.Collapse>\r\n</Navbar>\r\n</Container>\r\n);\r\n}\r\n","export const getGraphData = state => state.smokerpi.graphData\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './actions/actions';\r\nimport * as selectors from './selectors/selector';\r\nimport { ResponsiveContainer, Line, LineChart,XAxis,Tooltip,CartesianGrid,Legend } from 'recharts'\r\n\r\nclass Graph extends Component {\r\n\r\n    state = {\r\n      timer: null  \r\n    };\r\n  \r\n    componentDidMount() {\r\n      this.props.getGraphData();\r\n      let timer = setInterval(() => this.props.getGraphData(), 30000);        \r\n      this.setState({timer});\r\n    }\r\n  \r\n    componentWillUnmount(){\r\n      clearInterval(this.state.timer)     \r\n    }\r\n     \r\n    render() {    \r\n        return (\r\n            <div style={{\r\n                paddingBottom: '56.25%', /* 16:9 */\r\n                position: 'relative',\r\n                height: 0\r\n                }} >\r\n                <div style={{\r\n                  position: 'absolute',\r\n                  top: '0',\r\n                  left: '0',\r\n                  width: '100%',\r\n                  height: '100%'\r\n                  }}>   \r\n                    <ResponsiveContainer>\r\n                        <LineChart   \r\n                            data={this.props.graphData}\r\n                            margin={{ top: 5, right: 20, left: 10, bottom: 5 }} >\r\n                            <XAxis dataKey=\"x\" />  \r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <CartesianGrid stroke=\"#f5f5f5\" />  \r\n                            <Line type=\"monotone\" dataKey=\"t\" stroke=\"#ff6666\" dot={false} yAxisId={0} />\r\n                            <Line type=\"monotone\" dataKey=\"b\" stroke=\"#82ca9d\" dot={false} yAxisId={1} />\r\n                            <Line type=\"monotone\" dataKey=\"d\" stroke=\"#80b3ff\" dot={false} yAxisId={1} />\r\n                            <Line type=\"monotone\" dataKey=\"s\" stroke=\"#c7c5ed\" dot={false} yAxisId={0} />\r\n                        </LineChart> \r\n                    </ResponsiveContainer>  \r\n                </div>\r\n            </div>   )};\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    graphData: selectors.getGraphData(state)\r\n   });\r\n  \r\nconst mapDispatchToProps = dispatch => ({        \r\n    getGraphData: () => dispatch(actions.getGraphData()),  \r\n    });\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Graph);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toggleAutomatic, toggleBlower, toggleDamper, getGraphData } from './actions/actions';\r\nimport \"bootswatch/dist/flatly/bootstrap.min.css\"; \r\nimport './App.css';\r\nimport { Button, ButtonGroup, Row, Col } from 'react-bootstrap';\r\n\r\nclass Controls extends Component {\r\n    render() {    \r\n        return (\r\n      <Row>\r\n        <Col className='d-flex justify-content-center'>\r\n          <ButtonGroup>                   \r\n            <Button variant=\"light\" className='ml-1' onClick={this.props.toggleBlower}>Toggle Blower</Button>             \r\n            <Button variant=\"light\" className='ml-1' onClick={this.props.toggleDamper}>Toggle Damper</Button>  \r\n            <Button variant=\"light\" className='ml-1' onClick={this.props.toggleAutomatic}>Toggle Pid</Button>  \r\n            <Button variant=\"light\" className='ml-1' onClick={() => this.props.getGraphData()}>Update Graph</Button>           \r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row> )\r\n    }\r\n};\r\n\r\nconst actionCreators = {\r\n    toggleAutomatic, toggleBlower, toggleDamper, getGraphData \r\n  };\r\n\r\nexport default connect(null, actionCreators)(Controls);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './actions/actions';\r\nimport \"bootswatch/dist/flatly/bootstrap.min.css\"; \r\nimport './App.css';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nclass StatusCard extends Component {\r\n    state = {\r\n      timer: null  \r\n    };\r\n    \r\n    componentDidMount() {\r\n      this.props.getCurrentState();\r\n      let timer = setInterval(() => this.props.getCurrentState(), 30000);        \r\n      this.setState({timer});\r\n    }\r\n    \r\n    componentWillUnmount(){\r\n        clearInterval(this.state.timer)     \r\n    }\r\n\r\n    render() {    \r\n        return (\r\n            <Card bg='light'>\r\n                <Card.Body className='d-flex justify-content-center'>\r\n                    <h1>{this.props.temperature}°C</h1> \r\n                </Card.Body>\r\n                <Card.Footer className=\"text-muted\">\r\n                    <small>Blower: {this.props.blower} Damper: {this.props.damper} Pid: {this.props.pid ? 'On' : 'Off'} Target: {this.props.targetTemperature}</small>\r\n                </Card.Footer>\r\n            </Card> \r\n      )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.smokerpi.state\r\n   });\r\n\r\nconst mapDispatchToProps = dispatch => ({        \r\n    getCurrentState: () => dispatch(actions.getCurrentState()),  \r\n   });\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StatusCard);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport \"bootswatch/dist/flatly/bootstrap.min.css\"; \nimport './App.css';\nimport { Container, Card, CardDeck } from 'react-bootstrap';\nimport Graph from './graph';\nimport Controls from './controls';\nimport StatusCard from './statuscard';\n\nclass Home extends Component {\n\n  render() {    \n    return (                    \n      <Container>       \n        <CardDeck>\n          <StatusCard />      \n        </CardDeck>\n        <CardDeck>\n          <Card>\n            <Card.Body>\n              <Controls />      \n            </Card.Body> \n          </Card>\n        </CardDeck>\n        <CardDeck>\n          <Card>\n            <Card.Body>                 \n              <Graph />                         \n            </Card.Body>\n          </Card>\n        </CardDeck>     \n      </Container>   \n  )};\n}\n\nconst mapStateToProps = state => ({ })\n\nconst mapDispatchToProps = dispatch => ({ })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nexport const FormInput = ({\r\n        name,\r\n        type,\r\n        placeholder,\r\n        onChange,\r\n        className,\r\n        value,\r\n        error,\r\n        children,\r\n        label,\r\n        ...props\r\n      }) => {\r\n        \r\n        return (\r\n          <Form.Group>\r\n            <Form.Label htmlFor={name}>{label}</Form.Label>\r\n            <Form.Control\r\n              id={name}\r\n              name={name}\r\n              type={type}\r\n              placeholder={placeholder}\r\n              onChange={onChange}\r\n              value={value}\r\n              className={className}\r\n              style={error && {border: 'solid 1px red'}}\r\n            />\r\n            { error && <p>{ error }</p>}\r\n          </Form.Group>\r\n        )\r\n      }\r\n      \r\n      FormInput.defaultProps = {\r\n        type: \"text\",\r\n        className: \"\"\r\n      }\r\n      \r\n      FormInput.propTypes = {\r\n        name: PropTypes.string.isRequired,        \r\n        placeholder: PropTypes.string.isRequired,\r\n        type: PropTypes.oneOf(['text', 'number', 'password']),\r\n        className: PropTypes.string,\r\n        value: PropTypes.any,\r\n        onChange: PropTypes.func.isRequired\r\n      }","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './actions/actions';\r\nimport { Container, Button, Row, Form } from 'react-bootstrap';\r\nimport { FormInput } from  './forminput.js'\r\n\r\nclass Config extends Component {    \r\n    state = {        \r\n        errors: {},\r\n        submitted: false\r\n      };\r\n\r\n    handleChange = event => {\r\n        const { config } = this.state;        \r\n        config[event.target.name] = event.target.value;\r\n        this.setState({ config });\r\n      };\r\n\r\n    componentDidMount() {            \r\n      this.setState({ config: { ...this.props }});       \r\n      this.props.getConfig();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {                \r\n        this.setState({ config: { ...nextProps }});        \r\n    }\r\n\r\n    onSubmit = () => {\r\n        const {\r\n          config: { set_temperature }\r\n        } = this.state;\r\n        let err = {};\r\n    \r\n        if (!set_temperature) {\r\n          err.set_temperature = \"Enter value\";\r\n        }\r\n        \r\n        this.setState({ errors: err }, () => {\r\n          if (Object.getOwnPropertyNames(this.state.errors).length === 0) {\r\n            this.setState({ submitted: true });            \r\n            this.props.updateConfig(this.state.config);    \r\n          }\r\n        });\r\n      };\r\n\r\n    render() {    \r\n        let text = JSON.stringify(this.state);\r\n        if (!this.state.config || !this.state.config.set_temperature) { \r\n            return ( \r\n            <div>{text}</div> \r\n            );        \r\n        }\r\n        \r\n        const {            \r\n            errors\r\n          } = this.state;\r\n      return (         \r\n        <Container>   \r\n            <h2>Config</h2>\r\n            <div>{text}</div>\r\n            <Form>\r\n            <FormInput\r\n              label=\"Target temperature\"\r\n              name=\"set_temperature\"\r\n              type=\"text\"\r\n              value={this.state.config.set_temperature}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.set_temperature}\r\n              required\r\n              className=\"input\"\r\n             />\r\n             <FormInput\r\n              label=\"Blower minimum\"\r\n              name=\"blower_minimum\"\r\n              type=\"text\"\r\n              value={this.state.config.blower_minimum}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.blower_minimum}\r\n              required\r\n              className=\"input\"\r\n            />\r\n            <FormInput\r\n              label=\"Push interval\"\r\n              name=\"push_interval\"\r\n              type=\"text\"\r\n              value={this.state.config.push_interval}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.push_interval}\r\n              required\r\n              className=\"input\"\r\n            />\r\n            <FormInput\r\n              label=\"Graph interval\"\r\n              name=\"graph_interval\"\r\n              type=\"text\"\r\n              value={this.state.config.graph_interval}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.graph_interval}\r\n              required\r\n              className=\"input\"\r\n            />\r\n            <FormInput\r\n              label=\"Max CS Pin\"\r\n              name=\"cs_pin\"\r\n              type=\"text\"\r\n              value={this.state.config.cs_pin}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.cs_pin}\r\n              required\r\n              className=\"input\"\r\n            />\r\n            <FormInput\r\n              label=\"Max Clock Pin\"\r\n              name=\"clock_pin\"\r\n              type=\"text\"\r\n              value={this.state.config.clock_pin}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.clock_pin}\r\n              required\r\n              className=\"input\"\r\n            />\r\n            <FormInput\r\n              label=\"Max Data Pin\"\r\n              name=\"data_pin\"\r\n              type=\"text\"\r\n              value={this.state.config.data_pin}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.data_pin}\r\n              required\r\n              className=\"input\"\r\n            />\r\n            <FormInput\r\n              label=\"Blower pin 1\"\r\n              name=\"blower_pin1\"\r\n              type=\"text\"\r\n              value={this.state.config.blower_pin1}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.blower_pin1}\r\n              required\r\n              className=\"input\"\r\n            />\r\n             <FormInput\r\n              label=\"Blower pin 2\"\r\n              name=\"blower_pin2\"\r\n              type=\"text\"\r\n              value={this.state.config.blower_pin2}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.blower_pin2}\r\n              required\r\n              className=\"input\"\r\n            />\r\n             <FormInput\r\n              label=\"Damper pin\"\r\n              name=\"damper_pin\"\r\n              type=\"text\"\r\n              value={this.state.config.damper_pin}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.damper_pin}\r\n              required\r\n              className=\"input\"\r\n            />\r\n            <FormInput\r\n              label=\"Damper min\"\r\n              name=\"damper_minimum\"\r\n              type=\"text\"\r\n              value={this.state.config.damper_minimum}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.damper_minimum}\r\n              required\r\n              className=\"input\"\r\n            />\r\n            <FormInput\r\n              label=\"Damper max\"\r\n              name=\"damper_maximum\"\r\n              type=\"text\"\r\n              value={this.state.config.damper_maximum}\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter value...\"\r\n              error={errors.damper_maximum}\r\n              required\r\n              className=\"input\"\r\n            />\r\n            </Form>\r\n            <Row><Button onClick={this.onSubmit}>Save</Button></Row>\r\n        </Container>        \r\n      );  \r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state.smokerpi.config\r\n })\r\n    \r\nconst mapDispatchToProps = dispatch => ({\r\n  getConfig: () => dispatch(actions.getConfig()),  \r\n  updateConfig: (config) => dispatch(actions.updateConfig(config)),  \r\n })\r\n    \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Config);","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n  } from \"react-router-dom\";\r\n  import MyNavBar from './NavBar';\r\n  import Home from './home';\r\n  import Config from './config';\r\n  \r\n  export default function App() {\r\n    return (\r\n      <Router>\r\n          <MyNavBar appTitle='SmokerPi' />\r\n        <div>  \r\n          {/* A <Switch> looks through its children <Route>s and\r\n              renders the first one that matches the current URL. */}\r\n          <Switch>            \r\n            <Route path=\"/config\">\r\n              <Config />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\nimport './index.css';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n\t\t<App />\n\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './rootReducer';\r\n\r\nexport default function configureStore() {\r\n return createStore(\r\n  rootReducer,\r\n   applyMiddleware(thunk, logger)\r\n );\r\n}"],"sourceRoot":""}