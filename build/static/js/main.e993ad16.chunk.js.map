{"version":3,"sources":["serviceWorker.js","rootReducer.js","reducers/reducer.js","actions/actions.js","store.js","home.js","index.js","socketMiddleware.js"],"names":["Boolean","window","location","hostname","match","combineReducers","smoker","state","graphData","action","type","data","payload","url","Home","this","props","getState","getAllGraph","Container","CardDeck","Card","bg","Body","className","temperature","Footer","blower","pid","targetTemperature","Row","Col","ButtonGroup","Button","variant","onClick","toggleBlower","toggleAutomatic","style","paddingBottom","position","height","top","left","width","margin","right","bottom","dataKey","stroke","dot","yAxisId","Component","connect","dispatch","getTime","fetch","then","response","ok","json","Error","statusText","toastr","removeByType","error","message","method","ReactDOM","render","StrictMode","store","href","createStore","rootReducer","applyMiddleware","thunk","logger","socket","io","console","dir","on","log","next","emit","socketMiddleware","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e993ad16.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport reducer from './reducers/reducer';\r\n\r\nexport default combineReducers({ \r\n smoker: reducer\r\n});","import {LOAD_DATA_SUCCESS, SOCKET_MESSAGE_RECEIVED} from \"../actions/actions\";\r\n\r\nexport default function reducer(state = { graphData: [] }, action) {\r\n    switch (action.type) {\r\n        case LOAD_DATA_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        }\r\n        case SOCKET_MESSAGE_RECEIVED: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import {toastr} from \"react-redux-toastr\";\r\n\r\nexport const LOAD_DATA_SUCCESS = \"LOAD_DATA_SUCCESS\";\r\nexport const DATA_LOADED = \"DATA_LOADED\";\r\nexport const SEND_WEBSOCKET_MESSAGE = \"SEND_WEBSOCKET_MESSAGE\";\r\nexport const SOCKET_MESSAGE_RECEIVED = \"SOCKET_MESSAGE_RECEIVED\";\r\n\r\nexport const getTime = () => dispatch => {\r\n    return fetch(\r\n        '/api/time')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }            throw new Error(response.statusText);\r\n        })\r\n        .then(\r\n            data => {\r\n                toastr.removeByType('error');\r\n                dispatch({type: LOAD_DATA_SUCCESS, data});\r\n            },\r\n            error => {\r\n                toastr.error(`Error loading data: ${error.message}`);\r\n            })\r\n}\r\n\r\nexport const toggleBlower = () => {\r\n        return (dispatch) => {\t\t\r\n            dispatch({ type: SEND_WEBSOCKET_MESSAGE, method: 'toggleBlower', payload: {} });\t\t\r\n        }\t    \r\n    }   \r\n\r\nexport const toggleAutomatic = () => {\r\n        return (dispatch) => {\t\t\r\n            dispatch({ type: SEND_WEBSOCKET_MESSAGE, method: 'toggleAutomatic', payload: {} });\t\t\r\n        }\t    \r\n    }       \r\n\r\nexport const getState = () => {\r\n    return (dispatch) => {\t\t\r\n        dispatch({ type: SEND_WEBSOCKET_MESSAGE, method: 'getState', payload: {} });\t\t\r\n    }\r\n}\t    \r\n\r\nexport const getAllGraph = () => {\r\n        return (dispatch) => {\t\t\r\n            dispatch({ type: SEND_WEBSOCKET_MESSAGE, method: 'getAllGraph', payload: {} });\t\t\r\n        }\r\n    }\t    \r\n   \r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './rootReducer';\r\nimport { socketMiddleware } from './socketMiddleware';\r\n\r\nexport default function configureStore(url) {\r\n return createStore(\r\n  rootReducer,\r\n   applyMiddleware(thunk, logger, socketMiddleware(url))\r\n );\r\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/actions';\nimport \"bootswatch/dist/flatly/bootstrap.min.css\"; \nimport './App.css';\nimport { Container,Button, ButtonGroup, Row, Col, Card, CardDeck } from 'react-bootstrap';\nimport { ResponsiveContainer, Line, LineChart,XAxis,Tooltip,CartesianGrid,Legend } from 'recharts'\n\nclass Home extends Component {\n\n  componentDidMount() {\n    this.props.getState();\n    this.props.getAllGraph();\n  }\n\n  render() {    \n    return (          \n    <div>      \n      <Container>       \n    <CardDeck>\n      <Card bg='light'>\n        <Card.Body className='d-flex justify-content-center'>\n        <h1>{this.props.smoker.temperature}°C</h1> \n        </Card.Body>\n        <Card.Footer className=\"text-muted\">\n  <small>Blower: {this.props.smoker.blower} Pid: {this.props.smoker.pid ? 'On' : 'Off'} Target: {this.props.smoker.targetTemperature}</small>\n        </Card.Footer>\n      </Card> \n      </CardDeck>\n      <CardDeck>\n      <Card>\n      <Card.Body>\n      <Row>\n        <Col className='d-flex justify-content-center'>\n          <ButtonGroup>\n            <Button variant=\"light\" className='ml-1' onClick={this.props.getState}>Test getState</Button>       \n            <Button variant=\"light\" className='ml-1' onClick={this.props.toggleBlower}>Test blower</Button>             \n            <Button variant=\"light\" className='ml-1' onClick={this.props.toggleAutomatic}>Test pid</Button>  \n            <Button variant=\"light\" className='ml-1' onClick={this.props.getAllGraph}>Test graph</Button> \n          </ButtonGroup>\n        </Col>\n      </Row> \n      </Card.Body> \n      </Card>\n      </CardDeck>\n      <CardDeck>\n      <Card>\n      <Card.Body><div style={{\n  paddingBottom: '56.25%', /* 16:9 */\n  position: 'relative',\n  height: 0\n}} >\n  <div style={{\n    position: 'absolute',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%'\n  }}>\n      <ResponsiveContainer>\n      <LineChart   \n  data={this.props.smoker.graphData}\n  margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\n>\n  <XAxis dataKey=\"x\" />  \n  <Tooltip />\n  <Legend />\n  <CartesianGrid stroke=\"#f5f5f5\" />  \n  <Line type=\"monotone\" dataKey=\"t\" stroke=\"#ff7300\" dot={false} yAxisId={0} />\n  <Line type=\"monotone\" dataKey=\"b\" stroke=\"#82ca9d\" dot={false} yAxisId={1} />\n  <Line type=\"monotone\" dataKey=\"s\" stroke=\"#8884d8\" dot={false} yAxisId={0} />\n  </LineChart>  \n      </ResponsiveContainer> \n      </div>\n      </div>      \n</Card.Body>\n      </Card>\n      </CardDeck>     \n    </Container>    \n    </div>    \n  )};\n}\n\nconst mapStateToProps = state => ({\n  ...state  \n })\n\nconst mapDispatchToProps = dispatch => ({\n  getTime: () => dispatch(actions.getTime()),\n  getState: () => dispatch(actions.getState()),\n  getAllGraph: () => dispatch(actions.getAllGraph()),  \n  toggleBlower: () => dispatch(actions.toggleBlower()),\n  toggleAutomatic: () => dispatch(actions.toggleAutomatic())\n })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\nimport './index.css';\nimport App from './home';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore(window.location.href)}>\n\t\t<App />\n\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import io from \"socket.io-client\"\r\n\r\nexport const socketMiddleware = (url) => {\r\n        return store => {    \r\n        \r\n        let socket = io.connect(url);\r\n        console.dir(socket);\r\n        \r\n        socket.on('message', (message) => {\r\n            console.log(message);\r\n            store.dispatch({\r\n                type : 'SOCKET_MESSAGE_RECEIVED',\r\n                payload : message\r\n            });\r\n        });\r\n\r\n        return next => action => {            \r\n            if(action.type === \"SEND_WEBSOCKET_MESSAGE\") {\r\n                console.log(action);\r\n                socket.emit(action.method, action.payload);\r\n                return;\r\n            }\r\n\r\n            return next(action);\r\n        }    \r\n    }\r\n}"],"sourceRoot":""}