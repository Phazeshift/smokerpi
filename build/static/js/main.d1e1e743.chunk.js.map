{"version":3,"sources":["serviceWorker.js","rootReducer.js","reducers/reducer.js","actions/actions.js","NavBar.js","store.js","App.js","index.js","socketMiddleware.js"],"names":["Boolean","window","location","hostname","match","combineReducers","smoker","state","action","type","data","payload","navBar","props","Container","Navbar","collapseOnSelect","bg","variant","expand","fixed","Brand","href","appTitle","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","url","App","this","getState","fluid","Jumbotron","Row","Col","temperature","xs","blower","Button","onClick","toggleBlower","JSON","stringify","Component","connect","dispatch","getTime","fetch","then","response","ok","json","Error","statusText","toastr","removeByType","error","message","method","itemAdded","actions","ReactDOM","render","StrictMode","store","createStore","rootReducer","applyMiddleware","thunk","logger","socket","io","console","dir","on","log","next","emit","socketMiddleware","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d1e1e743.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport reducer from './reducers/reducer';\r\n\r\nexport default combineReducers({ \r\n smoker: reducer\r\n});","import {LOAD_DATA_SUCCESS, SOCKET_MESSAGE_RECEIVED} from \"../actions/actions\";\r\n\r\nexport default function reducer(state = { }, action) {\r\n    switch (action.type) {\r\n        case LOAD_DATA_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        }\r\n        case SOCKET_MESSAGE_RECEIVED: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import {toastr} from \"react-redux-toastr\";\r\n\r\nexport const LOAD_DATA_SUCCESS = \"LOAD_DATA_SUCCESS\";\r\nexport const DATA_LOADED = \"DATA_LOADED\";\r\nexport const SEND_WEBSOCKET_MESSAGE = \"SEND_WEBSOCKET_MESSAGE\";\r\nexport const SOCKET_MESSAGE_RECEIVED = \"SOCKET_MESSAGE_RECEIVED\";\r\n\r\nexport const getTime = () => dispatch => {\r\n    return fetch(\r\n        '/api/time')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }            throw new Error(response.statusText);\r\n        })\r\n        .then(\r\n            data => {\r\n                toastr.removeByType('error');\r\n                dispatch({type: LOAD_DATA_SUCCESS, data});\r\n            },\r\n            error => {\r\n                toastr.error(`Error loading data: ${error.message}`);\r\n            })\r\n}\r\n\r\nexport const itemAdded = (data) => {\r\n\treturn (dispatch) => {\t\t\r\n\t    dispatch({type: DATA_LOADED, data});\t\r\n    }\r\n}\t\r\n    \r\nexport const socketAction = (socket) => {\r\n\treturn (dispatch) => {\t\t\r\n\t    socket.emit('addItem', { value: 'test'});\t\t\r\n    }\r\n}\t\r\n    \r\nexport const toggleBlower = () => {\r\n        return (dispatch) => {\t\t\r\n            dispatch({ type: SEND_WEBSOCKET_MESSAGE, method: 'toggleBlower', payload: {} });\t\t\r\n        }\t    \r\n    }   \r\n\r\nexport const getState = () => {\r\n    return (dispatch) => {\t\t\r\n        dispatch({ type: SEND_WEBSOCKET_MESSAGE, method: 'getState', payload: {} });\t\t\r\n    }\t    \r\n}   \r\n","import React from 'react';\r\nimport { Container,Navbar,Nav,NavDropdown } from 'react-bootstrap'\r\n\r\nexport default function navBar(props) {\r\n    return (\r\n<Container>\r\n<Navbar collapseOnSelect bg=\"dark\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n  <Navbar.Brand href=\"#home\">{props.appTitle}</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link href=\"#home\">Home</Nav.Link>\r\n      <Nav.Link href=\"#link\">Link</Nav.Link>      \r\n    </Nav>\r\n    <Nav>      \r\n      <NavDropdown title=\"Help\" id=\"basic-nav-dropdown\">\r\n        <NavDropdown.Item href=\"https://github.com/Phazeshift/smokerpi\">About</NavDropdown.Item>        \r\n      </NavDropdown>\r\n    </Nav>\r\n    </Navbar.Collapse>\r\n</Navbar>\r\n</Container>\r\n);\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './rootReducer';\r\nimport { socketMiddleware } from './socketMiddleware';\r\n\r\nexport default function configureStore(url) {\r\n return createStore(\r\n  rootReducer,\r\n   applyMiddleware(thunk, logger, socketMiddleware(url))\r\n );\r\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/actions';\nimport MyNavBar from './NavBar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Container,Button, Row, Col, Jumbotron } from 'react-bootstrap';\n\n\nclass App extends Component {\n  \n  componentDidMount() {\n    this.props.getState();\n  }\n\n  render() {    \n    return (          \n    <div>\n      <MyNavBar appTitle='SmokerPi' />\n      <Container fluid>\n      {/* <div className=\"App-logo\"> \n        <img src={fire} alt=\"Logo\" />\n    </div> */}    \n      <Jumbotron>\n        <Row>\n           <Col className='d-flex justify-content-center'>\n             <h1>{this.props.smoker.temperature}°C</h1>      \n           </Col>\n        </Row>        \n      </Jumbotron>\n      <Row className='d-flex align-items-end'>\n      <Col xs='1'></Col>\n      <Col >\n        <small>Blower: {this.props.smoker.blower}</small>\n      </Col>\n      </Row>\n      <Row>\n        <Col className='d-flex justify-content-center'>\n            <Button variant=\"light\" onClick={this.props.getState}>Test getState</Button>       \n            <Button variant=\"light\" onClick={this.props.toggleBlower}>Test blower</Button>             \n        </Col>\n      </Row>  \n      <pre className='text-black-50'>\n      {\n      JSON.stringify(this.props)\n      }\n      </pre>          \n    </Container>\n    </div>    \n  )};\n}\n\nconst mapStateToProps = state => ({\n  ...state\n })\n\nconst mapDispatchToProps = dispatch => ({\n  getTime: () => dispatch(actions.getTime()),\n  getState: () => dispatch(actions.getState()),\n  itemAdded: (data) => dispatch(actions.itemAdded(data)),\n  toggleBlower: () => dispatch(actions.toggleBlower())\n })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore(\"http://localhost:5000\")}>\n\t\t<App />\n\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import io from \"socket.io-client\"\r\n\r\nexport const socketMiddleware = (url) => {\r\n        return store => {    \r\n        \r\n        let socket = io.connect(url);\r\n        console.dir(socket);\r\n        \r\n        socket.on('message', (message) => {\r\n            console.log(message);\r\n            store.dispatch({\r\n                type : 'SOCKET_MESSAGE_RECEIVED',\r\n                payload : message\r\n            });\r\n        });\r\n\r\n        return next => action => {\r\n            console.log(action);\r\n            if(action.type === \"SEND_WEBSOCKET_MESSAGE\") {\r\n                console.log(action);\r\n                socket.emit(action.method, action.payload);\r\n                return;\r\n            }\r\n\r\n            return next(action);\r\n        }    \r\n    }\r\n}"],"sourceRoot":""}